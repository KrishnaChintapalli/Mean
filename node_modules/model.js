var mongoose = require('mongoose'),
    mongoose_promise = require('q').Promise;

mongoose.connect('mongodb://localhost/Mean');

var db = mongoose.connection;
db.on('error', function(){
    console.log("connection error!");
});

//db.on('open', function(){
var User_Schema =mongoose.Schema({
    _id:String,
    first_name: String,
    last_name: String,
    password:String,
    email:String,
    creadted: { type: Date, default:Date.now},
    updated: { type: Date, default:Date.now}
});

var conversation_Schema = mongoose.Schema({
    _id: String,
    participants:{type: mongoose.Schema.Types.ObjectId, ref:'user_details'}
});
var messages_Schema = mongoose.Schema({
    author:{type: mongoose.Schema.Types.ObjectId, ref:'user_details'},
    body: String,
    created: { type: Date, default:Date.now},
    coversationId: {type: mongoose.Schema.Types.ObjectId, ref:'conversation'}
});

var user_model =mongoose.model('user_details', User_Schema);
var conversation_model = mongoose.model('conversation',conversation_Schema);
var message_model = mongoose.model('messages',messages_Schema);



var  save = function(newuser, callback){

    var user = user_model(newuser);
    user.save(function(err,res){
        if(err){
            console.log(err);
            return callback(err);
        }else{
            console.log('saved');
            return callback(null, res);
        }
    });

}

var  findById = function(userName, callback){

    user_model.find({_id:userName}, function(err,res){

        if(err){
            return callback(err);
        }else{
            console.log(res);
            return callback(null, res);
        }
    });

}

//});

module.exports ={save, findById};

